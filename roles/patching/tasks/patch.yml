---
- name: Fail if RHEL6 is detected (Out of Support)
  ansible.builtin.assert:
    that:
      - (ansible_facts['distribution_major_version'] == '7') or (ansible_facts['distribution_major_version'] == '8')/
       or (ansible_facts['distribution_major_version'] == '9')
    fail_msg: "RHEL6 machines are out-of-support and will not be patched."
    success_msg: "RHEL{{ ansible_facts['distribution_major_version'] }} detected. Proceeding with patching."

- name: Obtain Information on Repositories
  ansible.builtin.include_tasks: repo_facts.yml

- name: (RHEL7) Fail if ELS Repos not Present (Out of Support)
  ansible.builtin.assert:
    that:
      - (yum_repo.results | map(attribute="repoid") | list) | select("search", "els") | list | length > 0
    fail_msg: "RHEL7 machines that don't have an ELS subscription are out-of-support."
    success_msg: "ELS repositories detected. Proceeding with patching."
  when: ansible_facts['distribution_major_version'] == '7'

- name: Register pre-patching statistics
  ansible.builtin.set_fact:
    pre_kernel: "{{ ansible_kernel }}"
    pre_uptime: "{{ (ansible_facts.uptime_seconds / 86400) | round }}"

- name: Cleanup yum cache
  ansible.builtin.dnf:
    update_cache: true
    # cache_valid_time: 3600
  register: yum_cache

- name: Gather installed kernel packages
  ansible.builtin.package_facts:
    manager: auto

- name: Count installed kernel packages
  ansible.builtin.set_fact:
    kernel_count: "{{ ansible_facts.packages['kernel'] | length if 'kernel' in ansible_facts.packages else 0 }}"

- name: Remove old kernels from /boot
  ansible.builtin.dnf:
    name: "kernel"
    state: absent
    installroot: /
    exclude: "{{ ansible_kernel }}"
  when:
    - (package_cleanup | default('false')) | bool
    - kernel_count.stdout|int > 1

- name: Obtain Information on Installed Packages
  ansible.builtin.include_tasks: package_facts.yml

- name: Uninstall BigFix Client before Updating
  ansible.builtin.include_role:
    name: linux.main.bigfix_client
    tasks_from: uninstall.yml
  when:
    - update_bigfix | bool
    - bigfix_rpm is defined
    - bigfix_license is defined

- name: Re-Install BigFix Client to Update
  ansible.builtin.include_role:
    name: linux.main.bigfix_client
    tasks_from: install.yml
  when:
    - update_bigfix | bool
    - bigfix_rpm is defined
    - bigfix_license is defined

- name: Display and update
  when: (yum_updates.results | map(attribute='envra') | list | length) > 0
  block:
    - name: Display Number of of patches needed
      ansible.builtin.debug:
        msg: "Number of Updates: {{ yum_updates.results | map(attribute='envra') | list | length }}"

    - name: Updating IPA client first
      ansible.builtin.package:
        name: "ipa-client"
        state: latest
      register: ipa_patch

    - name: (debug) Show ipa_patch
      ansible.builtin.debug:
        var: ipa_patch
        verbosity: 1
      when: ipa_patch is defined

    - name: Updating remaining packages
      ansible.builtin.package:
        name: "*"
        state: latest
        exclude: "{{ exclude_list }}"
        disablerepo: "{{ disable_repo }}"
        skip_broken: true
      register: yum_patch

    - name: (debug) Show yum_patch
      ansible.builtin.debug:
        var: yum_patch
        verbosity: 1
      when: yum_patch is defined

- name: Reboot if needed
  when: >
    ( ( force_restart | bool ) or
    ( ipa_patch is changed and ipa_patch is not failed ) or
    ( yum_patch is changed and yum_patch is not failed) )
    and
    ( not ( do_not_restart | bool ) )
  block:
    - name: Server reboot
      ansible.builtin.shell:
        cmd: |
          sleep 5 && reboot
      async: 1
      changed_when: false
      poll: 0
      failed_when: server_reboot_result.rc != 0 and ('Connection to' not in server_reboot_result.stderr)
      register: server_reboot_result

    - name: Wait for forced reboot
      ansible.builtin.wait_for_connection:
        timeout: 600
        delay: 20
      register: reboot_result

    - name: Display reboot time
      ansible.builtin.debug:
        msg: "{{ ansible_hostname }} rebooted in {{ reboot_result.elapsed }} seconds."

    - name: Re-gather Ansible Facts
      ansible.builtin.setup:

    - name: Register post-patching statistics
      ansible.builtin.set_fact:
        post_kernel: "{{ ansible_kernel }}"
        post_uptime: "{{ (ansible_facts.uptime_seconds / 86400) | round }}"

    - name: Cleanup yum cache post patching
      ansible.builtin.command: "yum clean all"
      register: yum_clean_result
      changed_when: "'Nothing to do' not in yum_clean_result.stdout"
      failed_when: yum_clean_result.rc != 0 and ('Nothing to do' not in yum_clean_result.stdout)

    - name: Display Patching Statistics
      ansible.builtin.debug:
        msg:
          - "Pre-patch Uptime: {{ pre_uptime }} days"
          - "Post-patch Uptime: {{ post_uptime }} days"
          - "Pre-Kernel Version: {{ pre_kernel }}"
          - "Post-Kernel Version: {{ post_kernel }}"
